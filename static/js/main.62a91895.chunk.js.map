{"version":3,"sources":["Creator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Creator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","image","undefined","text_onChange","bind","assertThisInitialized","file_onChange","dl_onClick","updateCanvas","ctx","canvas","getContext","clearRect","fillStyle","fillRect","width","height","drawImage","font","textAlign","textBaseline","x","yi","split","forEach","c","index","fillText","e","setState","target","value","_this2","Image","file","files","src","window","URL","createObjectURL","onload","data","toDataURL","dlLink","document","createElement","href","download","click","_this3","react","ref","name","id","cols","rows","onChange","type","accept","onClick","React","App","react_default","a","className","Creator_Creator","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.62a91895.chunk.js","sourcesContent":["import * as React from 'react'\nimport './Creator.css'\n\nexport default class Creator extends React.Component<{}, { text: string; image: HTMLImageElement | undefined }> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      text: 'ガキが・・・\\n舐めてると\\n潰すぞ',\n      image: undefined,\n    }\n    this.text_onChange = this.text_onChange.bind(this)\n    this.file_onChange = this.file_onChange.bind(this)\n    this.dl_onClick = this.dl_onClick.bind(this)\n  }\n\n  componentDidMount() {\n    this.updateCanvas()\n  }\n\n  componentDidUpdate() {\n    this.updateCanvas()\n  }\n\n  updateCanvas() {\n    const { canvas } = this as any\n    const ctx = canvas.getContext('2d')\n    ctx.clearRect(0, 0, 640, 360)\n\n    ctx.fillStyle = 'gray'\n    ctx.fillRect(0, 0, 640, 360)\n\n    if (this.state.image) {\n      const height = 360\n      const width = (this.state.image.width * height) / this.state.image.height\n      ctx.drawImage(this.state.image, (290 + 640) / 2 - width / 2, 0, width, height)\n    }\n\n    ctx.fillStyle = 'black'\n    ctx.fillRect(0, 0, 290, 360)\n\n    ctx.font = \"normal 42px 'Noto Serif JP'\"\n    ctx.fillStyle = 'white'\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n    let x = 220\n    let yi = 0\n    this.state.text.split('').forEach((c: string, index: number) => {\n      if (c == '\\n') {\n        x -= 220 / 3\n        yi = 0\n        return\n      }\n      ctx.fillText(c, x, 56 + yi * 48)\n      yi++\n    })\n  }\n\n  text_onChange(e: any) {\n    this.setState({ text: e.target.value })\n  }\n\n  file_onChange(e: any) {\n    const image = new Image()\n    const file = e.target.files[0]\n    if (!file) {\n      this.setState({ image: undefined })\n      return\n    }\n    image.src = window.URL.createObjectURL(file)\n    image.onload = () => {\n      this.setState({ image })\n    }\n  }\n\n  dl_onClick(e: any) {\n    const { canvas } = this as any\n    const data = canvas.toDataURL()\n    var dlLink = document.createElement('a')\n    dlLink.href = data\n    dlLink.download = 'gakitsubu.png'\n    dlLink.click()\n  }\n\n  render() {\n    return (\n      <div>\n        <canvas\n          ref={e => {\n            ;(this as any).canvas = e\n          }}\n          width=\"640\"\n          height=\"360\"\n        />\n        <textarea name=\"text\" id=\"text\" cols={30} rows={5} value={this.state.text} onChange={this.text_onChange} />\n        <input id=\"file\" name=\"file\" type=\"file\" accept=\"image/jpeg,image/png\" onChange={this.file_onChange} />\n        <button onClick={this.dl_onClick}>画像をダウンロード</button>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './App.css'\nimport Creator from './Creator'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>TEST</p>\n          <div className=\"container\">\n            <Creator />\n          </div>\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}