{"version":3,"sources":["Creator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Creator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","isIOS","test","navigator","userAgent","state","text","image","undefined","width","height","culcHeight","isTimeVisible","time","text_onChange","bind","assertThisInitialized","file_onChange","dl_onClick","isTimeVisible_onChange","time_onChange","updateCanvas","param","ctx","x","y","radius","color","save","fillStyle","beginPath","moveTo","lineTo","arc","Math","PI","closePath","fill","restore","canvas","getContext","canvasWidth","canvasHeight","imageareaWidth","textareaWidth","lines","split","lineCount","length","lineMaxLength","max","apply","toConsumableArray","map","line","lineHeight","magnifier","charHeight","fontSize","lineX","lineY","fillRect","drawImage","font","concat","textAlign","textBaseline","yi","forEach","c","index","fillText","match","right","drawRect","e","setState","target","value","_this2","Image","file","files","src","window","URL","createObjectURL","onload","data","toDataURL","dlLink","document","createElement","href","download","click","_this3","react","ref","className","name","id","rows","onChange","type","accept","checked","step","onClick","React","App","react_default","a","Creator_Creator","Component","Boolean","location","hostname","ReactDOM","render","src_App","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4472b115.chunk.js","sourcesContent":["import * as React from 'react'\n\nexport default class Creator extends React.Component<\n  {},\n  {\n    text: string\n    image: HTMLImageElement | undefined\n    width: number\n    height: number\n    isTimeVisible: boolean\n    time: string\n  }\n> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      text: 'ガキが・・・\\n舐めてると\\n潰すぞ',\n      image: undefined,\n      width: 1280,\n      height: this.culcHeight(1280),\n      isTimeVisible: true,\n      time: '00:03:43',\n    }\n    this.text_onChange = this.text_onChange.bind(this)\n    this.file_onChange = this.file_onChange.bind(this)\n    this.dl_onClick = this.dl_onClick.bind(this)\n    this.isTimeVisible_onChange = this.isTimeVisible_onChange.bind(this)\n    this.time_onChange = this.time_onChange.bind(this)\n  }\n\n  culcHeight(width: number): number {\n    return (width * 9) / 16\n  }\n\n  componentDidMount() {\n    this.updateCanvas()\n  }\n\n  componentDidUpdate() {\n    this.updateCanvas()\n  }\n\n  drawRect(param: { ctx: any; x: number; y: number; width: number; height: number; radius: number; color: any }) {\n    const ctx = param.ctx\n    const x = param.x\n    const y = param.y\n    const width = param.width\n    const height = param.height\n    const radius = param.radius || 0\n    const color = param.color\n\n    ctx.save()\n    ctx.fillStyle = color\n    ctx.beginPath()\n    ctx.moveTo(x + radius, y)\n    ctx.lineTo(x + width - radius, y)\n    ctx.arc(x + width - radius, y + radius, radius, Math.PI * 1.5, 0, false)\n    ctx.lineTo(x + width, y + height - radius)\n    ctx.arc(x + width - radius, y + height - radius, radius, 0, Math.PI * 0.5, false)\n    ctx.lineTo(x + radius, y + height)\n    ctx.arc(x + radius, y + height - radius, radius, Math.PI * 0.5, Math.PI, false)\n    ctx.lineTo(x, y + radius)\n    ctx.arc(x + radius, y + radius, radius, Math.PI, Math.PI * 1.5, false)\n    ctx.closePath()\n    ctx.fill()\n    ctx.restore()\n  }\n\n  updateCanvas() {\n    const { canvas } = this as any\n    const ctx = canvas.getContext('2d')\n\n    const canvasWidth = this.state.width\n    const canvasHeight = this.state.height\n    const imageareaWidth = canvasHeight\n    const textareaWidth = canvasWidth - imageareaWidth\n    const lines = this.state.text.split('\\n')\n    const lineCount = lines.length + 1\n    const lineMaxLength = Math.max(...lines.map(line => line.length))\n    const lineHeight = textareaWidth / lineCount\n    const magnifier = canvasWidth / 640\n    const charHeight = ((48 * 6) / lineMaxLength) * magnifier\n    const fontSize = ((42 * 6) / lineMaxLength) * magnifier\n    const lineX = textareaWidth - lineHeight\n    const lineY = ((26 * 6) / lineMaxLength + 30) * magnifier\n\n    ctx.fillStyle = 'gray'\n    ctx.fillRect(0, 0, canvasWidth, canvasHeight)\n\n    if (this.state.image) {\n      let width = 0,\n        height = 0\n      if (this.state.image.width > this.state.image.height) {\n        height = imageareaWidth\n        width = (this.state.image.width * height) / this.state.image.height\n      } else {\n        width = imageareaWidth\n        height = (this.state.image.height * width) / this.state.image.width\n      }\n      ctx.drawImage(this.state.image, (textareaWidth + canvasWidth) / 2 - width / 2, 0, width, height)\n    }\n\n    ctx.fillStyle = 'black'\n    ctx.fillRect(0, 0, textareaWidth, canvasHeight)\n\n    ctx.font = `normal ${fontSize}px serif`\n    ctx.fillStyle = 'white'\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n    let x = lineX\n    let yi = 0\n    this.state.text.split('').forEach((c: string, index: number) => {\n      if (c == '\\n') {\n        x -= lineHeight\n        yi = 0\n        return\n      }\n      ctx.fillText(c, x, lineY + yi * charHeight, lineHeight)\n      yi++\n    })\n\n    if (this.state.isTimeVisible) {\n      let text = ''\n      const match = this.state.time.match(/0?0?:?0?(.*)/)\n      if (match) {\n        text = match[1]\n      }\n\n      const right = (1230 * canvasWidth) / 1280\n      const width = ((40 * text.length + 64) * canvasWidth) / 1280\n      const y = (538 * canvasWidth) / 1280\n      const height = (134 * canvasWidth) / 1280\n      const radius = (18 * canvasWidth) / 1280\n      this.drawRect({ ctx, x: right - width, y, width, height, radius, color: 'rgba(0, 0, 0, 0.8)' })\n\n      const fontSize = (76 * canvasWidth) / 1280\n      ctx.font = `normal ${fontSize}px gothic`\n      ctx.fillStyle = 'white'\n      ctx.textAlign = 'center'\n      ctx.textBaseline = 'middle'\n      if (!text) {\n        text = this.state.time\n      }\n      ctx.fillText(text, right - width / 2, y + height / 2)\n    }\n  }\n\n  text_onChange(e: any) {\n    this.setState({ text: e.target.value })\n  }\n\n  file_onChange(e: any) {\n    const image = new Image()\n    const file = e.target.files[0]\n    if (!file) {\n      this.setState({ image: undefined })\n      return\n    }\n    image.src = window.URL.createObjectURL(file)\n    image.onload = () => {\n      this.setState({ image })\n    }\n  }\n\n  private isIOS = /[ \\(]iP/.test(navigator.userAgent)\n\n  dl_onClick(e: any) {\n    const { canvas } = this as any\n    const data = canvas.toDataURL()\n    const dlLink = document.createElement('a')\n    dlLink.href = data\n    dlLink.download = 'gakitsubu.png'\n    dlLink.click()\n  }\n\n  isTimeVisible_onChange(e: any) {\n    this.setState({ isTimeVisible: !this.state.isTimeVisible })\n  }\n\n  time_onChange(e: any) {\n    this.setState({ time: e.target.value })\n  }\n\n  render() {\n    return (\n      <div>\n        <canvas\n          ref={e => {\n            ;(this as any).canvas = e\n          }}\n          width={this.state.width}\n          height={this.state.height}\n        />\n        <div className=\"forms is-vertical\">\n          <textarea\n            className=\"textarea\"\n            name=\"text\"\n            id=\"text\"\n            rows={5}\n            value={this.state.text}\n            onChange={this.text_onChange}\n          />\n          <div className=\"file\">\n            <label className=\"file-label\">\n              <input\n                className=\"file-input\"\n                type=\"file\"\n                name=\"resume\"\n                accept=\"image/jpeg,image/png\"\n                onChange={this.file_onChange}\n              />\n              <span className=\"file-cta\">\n                <span className=\"file-icon\">\n                  <i className=\"fas fa-upload\" />\n                </span>\n                <span className=\"file-label\">画像を開く…</span>\n              </span>\n            </label>\n          </div>\n          <div>\n            <label className=\"checkbox\">\n              <input type=\"checkbox\" checked={this.state.isTimeVisible} onChange={this.isTimeVisible_onChange} />\n              動画の長さを表示\n            </label>\n          </div>\n          {this.state.isTimeVisible && (\n            <input className=\"input\" type=\"time\" step=\"1\" value={this.state.time} onChange={this.time_onChange} />\n          )}\n          {!this.isIOS && (\n            <button className=\"button\" onClick={this.dl_onClick}>\n              画像をダウンロード\n            </button>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Creator from './Creator'\n\nclass App extends Component {\n  render() {\n    return (\n      <section className=\"section\">\n        <div className=\"container\">\n          <h1 className=\"title\">ガキが舐めてると潰すぞメーカー</h1>\n          <Creator />\n        </div>\n      </section>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bulma/css/bulma.css'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}