{"version":3,"sources":["Creator.tsx","serviceWorker.ts","index.tsx","App.tsx"],"names":["isIOS","test","navigator","userAgent","isFirefox","toLowerCase","indexOf","Creator","canvasHeight","useMemo","canvas","document","createElement","width","height","ctx","getContext","_useState","useState","_useState2","Object","slicedToArray","text","setText","_useState3","_useState4","time","setTime","_useState5","_useState6","isTimeVisible","setIsTimeVisible","_useState7","undefined","_useState8","image","setImage","file_onChange","useCallback","e","Image","file","target","files","src","window","URL","createObjectURL","onload","dl_onClick","data","toDataURL","dlLink","href","download","concat","dayjs","format","click","imageareaWidth","textareaWidth","lines","split","lineCount","length","lineMaxLength","Math","max","apply","toConsumableArray","map","line","lineHeight","charHeight","canvasWidth","fontSize","lineX","lineY","fillStyle","fillRect","drawImage","font","textAlign","textBaseline","x","yi","forEach","c","index","save","translate","rotate","PI","fillText","restore","match","measureText","margin","param","y","radius","color","beginPath","moveTo","lineTo","arc","closePath","fill","drawRect","react_default","a","alt","className","name","id","rows","value","onChange","type","accept","checked","step","placeholder","onClick","Boolean","location","hostname","ReactDOM","render","data-show-count","data-url","data-text","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f8ab9266.chunk.js","sourcesContent":["import React, { useState, useMemo, useCallback } from 'react'\nimport dayjs from 'dayjs'\n\nconst culcHeight = (width: number): number => {\n  return (width * 9) / 16\n}\n\nconst drawRect = (param: {\n  ctx: any\n  x: number\n  y: number\n  width: number\n  height: number\n  radius: number\n  color: any\n}) => {\n  const ctx = param.ctx\n  const x = param.x\n  const y = param.y\n  const width = param.width\n  const height = param.height\n  const radius = param.radius || 0\n  const color = param.color\n\n  ctx.save()\n  ctx.fillStyle = color\n  ctx.beginPath()\n  ctx.moveTo(x + radius, y)\n  ctx.lineTo(x + width - radius, y)\n  ctx.arc(x + width - radius, y + radius, radius, Math.PI * 1.5, 0, false)\n  ctx.lineTo(x + width, y + height - radius)\n  ctx.arc(x + width - radius, y + height - radius, radius, 0, Math.PI * 0.5, false)\n  ctx.lineTo(x + radius, y + height)\n  ctx.arc(x + radius, y + height - radius, radius, Math.PI * 0.5, Math.PI, false)\n  ctx.lineTo(x, y + radius)\n  ctx.arc(x + radius, y + radius, radius, Math.PI, Math.PI * 1.5, false)\n  ctx.closePath()\n  ctx.fill()\n  ctx.restore()\n}\n\nconst isIOS = /[ \\(]iP/.test(navigator.userAgent)\nconst isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') != -1\n\nexport default () => {\n  const canvasWidth = 1280\n  const canvasHeight = useMemo(() => culcHeight(canvasWidth), [canvasWidth])\n  const canvas = useMemo(() => {\n    const canvas = document.createElement('canvas') as HTMLCanvasElement\n    canvas.width = canvasWidth\n    canvas.height = canvasHeight\n    return canvas\n  }, [canvasWidth, canvasHeight])\n  const ctx = useMemo(() => canvas.getContext('2d')!, [canvas])\n\n  const [text, setText] = useState('ガキが・・・\\n舐めてると\\n潰すぞ')\n  const [time, setTime] = useState('00:03:43')\n  const [isTimeVisible, setIsTimeVisible] = useState(true)\n  const [image, setImage] = useState(undefined as HTMLImageElement | undefined)\n\n  const file_onChange = useCallback((e: any) => {\n    const image = new Image()\n    const file = e.target.files[0]\n    if (!file) {\n      setImage(undefined)\n      return\n    }\n    image.src = window.URL.createObjectURL(file)\n    image.onload = () => {\n      setImage(image)\n    }\n  }, [])\n\n  const dl_onClick = useCallback((e: any) => {\n    const data = canvas.toDataURL()\n    const dlLink = document.createElement('a')\n    dlLink.href = data\n    dlLink.download = `nametsubu-${dayjs().format('YYYY-MM-DDTHH-mm-ss')}.png`\n    dlLink.click()\n  }, [])\n\n  const imageareaWidth = canvasHeight\n  const textareaWidth = canvasWidth - imageareaWidth\n  const lines = text.split('\\n')\n  const lineCount = lines.length + 1\n  const lineMaxLength = Math.max(...lines.map(line => line.length))\n  const lineHeight = textareaWidth / lineCount\n  const magnifier = canvasWidth / 640\n  const charHeight = ((48 * 6) / lineMaxLength) * magnifier\n  const fontSize = ((42 * 6) / lineMaxLength) * magnifier\n  const lineX = textareaWidth - lineHeight\n  const lineY = ((26 * 6) / lineMaxLength + 30) * magnifier\n\n  ctx.fillStyle = 'gray'\n  ctx.fillRect(0, 0, canvasWidth, canvasHeight)\n\n  if (image) {\n    let width = 0,\n      height = 0\n    if (image.width > image.height) {\n      height = imageareaWidth\n      width = (image.width * height) / image.height\n    } else {\n      width = imageareaWidth\n      height = (image.height * width) / image.width\n    }\n    ctx.drawImage(image, (textareaWidth + canvasWidth) / 2 - width / 2, 0, width, height)\n  }\n\n  ctx.fillStyle = 'black'\n  ctx.fillRect(0, 0, textareaWidth, canvasHeight)\n\n  ctx.font = `normal ${fontSize}px \"ヒラギノ明朝 ProN W6\", \"HiraMinProN-W6\", \"HG明朝E\", \"ＭＳ Ｐ明朝\", \"MS PMincho\", \"MS 明朝\", serif`\n  ctx.fillStyle = 'white'\n  ctx.textAlign = 'center'\n  ctx.textBaseline = 'middle'\n  let x = lineX\n  let yi = 0\n  text.split('').forEach((c: string, index: number) => {\n    if (c == '\\n') {\n      x -= lineHeight\n      yi = 0\n      return\n    }\n    if (c === 'ー' || c === '〜' || c === '…') {\n      ctx.save()\n      ctx.translate(x, lineY + yi * charHeight)\n      ctx.rotate(Math.PI / 2)\n      ctx.fillText(c, 0, 0, lineHeight)\n      ctx.restore()\n    } else {\n      ctx.fillText(c, x, lineY + yi * charHeight, lineHeight)\n    }\n    yi++\n  })\n\n  if (isTimeVisible) {\n    let text = ''\n    const match = time.match(/0?0?:?0?(.*)/)\n    if (match) {\n      text = match[1]\n    }\n\n    const fontSize = (80 * canvasWidth) / 1280\n    ctx.font = `normal ${fontSize}px sans-serif`\n    ctx.fillStyle = 'white'\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n\n    const right = (1230 * canvasWidth) / 1280\n    const width = (64 * canvasWidth) / 1280 + ctx.measureText(text).width\n    const y = (538 * canvasWidth) / 1280\n    const height = (134 * canvasWidth) / 1280\n    const radius = (18 * canvasWidth) / 1280\n    const margin = isFirefox ? (6 * canvasWidth) / 1280 : 0\n\n    drawRect({ ctx, x: right - width, y, width, height, radius, color: 'rgba(0, 0, 0, 0.8)' })\n\n    if (!text) {\n      text = time\n    }\n    ctx.fillText(text, right - width / 2, y + height / 2 + margin)\n  }\n\n  return (\n    <div>\n      <img src={canvas.toDataURL()} alt=\"\" className=\"canvas-img\" />\n      <div className=\"forms is-vertical\">\n        <textarea\n          className=\"textarea\"\n          name=\"text\"\n          id=\"text\"\n          rows={5}\n          value={text}\n          onChange={e => setText(e.target.value)}\n        />\n        <div className=\"file\">\n          <label className=\"file-label\">\n            <input\n              className=\"file-input\"\n              type=\"file\"\n              name=\"resume\"\n              accept=\"image/jpeg,image/png\"\n              onChange={file_onChange}\n            />\n            <span className=\"file-cta\">\n              <span className=\"file-icon\">\n                <i className=\"fas fa-upload\" />\n              </span>\n              <span className=\"file-label\">画像を開く…</span>\n            </span>\n          </label>\n        </div>\n        <div>\n          <label className=\"checkbox\">\n            <input type=\"checkbox\" checked={isTimeVisible} onChange={() => setIsTimeVisible(!isTimeVisible)} />\n            動画の長さを表示\n          </label>\n        </div>\n        {isTimeVisible && (\n          <input\n            className=\"input\"\n            type=\"text\"\n            step=\"1\"\n            value={time}\n            onChange={e => setTime(e.target.value)}\n            placeholder=\"00:03:43\"\n          />\n        )}\n        {!isIOS && !isFirefox && (\n          <button className=\"button\" onClick={dl_onClick}>\n            画像をダウンロード\n          </button>\n        )}\n        <div>画像長押しでDLできます</div>\n      </div>\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bulma/css/bulma.css'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React, { Component } from 'react'\nimport Creator from './Creator'\n\nexport default () => {\n  return (\n    <section className=\"section\">\n      <div className=\"container\">\n        <h1 className=\"title\">ガキが舐めてると潰すぞメーカー </h1>\n        <Creator />\n        <div className=\"share\">\n          <a\n            href=\"https://twitter.com/share\"\n            className=\"twitter-share-button\"\n            data-show-count=\"false\"\n            data-url=\"https://kik4.github.io/nametsubu/\"\n            data-text=\"#ガキが舐めてると潰すぞメーカー\"\n          >\n            Tweet\n          </a>\n        </div>\n        <span className=\"version\">ver 1.1.0</span>\n      </div>\n    </section>\n  )\n}\n"],"sourceRoot":""}